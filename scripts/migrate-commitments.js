#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Carregar vari√°veis de ambiente
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceRoleKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå Vari√°veis de ambiente NEXT_PUBLIC_SUPABASE_URL e NEXT_PUBLIC_SUPABASE_ANON_KEY s√£o necess√°rias');
  process.exit(1);
}

// Criar cliente com privil√©gios de admin
const supabase = createClient(supabaseUrl, serviceRoleKey, {
  auth: { persistSession: false, autoRefreshToken: false },
});

async function runMigration() {
  try {
    console.log('üöÄ Iniciando migra√ß√£o para criar tabela de compromissos...');
    
    // Ler arquivo SQL
    const sqlPath = path.join(__dirname, '../supabase/migrations/commitments-table.sql');
    const sql = fs.readFileSync(sqlPath, 'utf8');
    
    // Executar SQL
    const { data, error } = await supabase.rpc('exec_sql', { sql_query: sql });
    
    if (error) {
      console.error('‚ùå Erro ao executar migra√ß√£o:', error);
      process.exit(1);
    }
    
    console.log('‚úÖ Migra√ß√£o executada com sucesso!');
    console.log('üìã Tabela "commitments" criada com sucesso');
    
  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error);
    process.exit(1);
  }
}

// Tentar executar direto via SQL
async function runMigrationDirect() {
  try {
    console.log('üöÄ Executando migra√ß√£o direta...');
    
    // SQL da migra√ß√£o
    const sql = `
      -- Create commitments table
      CREATE TABLE IF NOT EXISTS commitments (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        date DATE NOT NULL,
        time TIME NOT NULL,
        status VARCHAR(50) DEFAULT 'pendente' CHECK (status IN ('pendente', 'confirmado', 'cancelado')),
        type VARCHAR(50) DEFAULT 'other' CHECK (type IN ('income', 'expense', 'investment', 'meeting', 'other')),
        amount NUMERIC(10, 2),
        category VARCHAR(255),
        recurring BOOLEAN DEFAULT FALSE,
        recurring_pattern VARCHAR(50) CHECK (recurring_pattern IN ('daily', 'weekly', 'monthly', 'yearly')),
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      );
    `;
    
    // Executar cria√ß√£o da tabela
    const { error: tableError } = await supabase.rpc('exec_sql', { sql_query: sql });
    
    if (tableError) {
      console.log('üìù Tentando m√©todo alternativo...');
      
      // M√©todo alternativo - inserir via API
      const { error: apiError } = await supabase
        .from('commitments')
        .select('id')
        .limit(1);
        
      if (apiError && apiError.code === '42P01') {
        console.error('‚ùå Tabela n√£o existe e n√£o foi poss√≠vel criar. Execute manualmente no Supabase Dashboard:');
        console.log('üìã SQL para executar:');
        console.log(sql);
        console.log('\n-- Depois execute:');
        console.log('ALTER TABLE commitments ENABLE ROW LEVEL SECURITY;');
        console.log('CREATE POLICY "Allow users to access their own commitments" ON commitments FOR ALL USING (auth.uid() = user_id);');
        process.exit(1);
      }
    }
    
    console.log('‚úÖ Verifica√ß√£o da tabela bem-sucedida!');
    
    // Configurar RLS
    const rlsSQL = `
      ALTER TABLE commitments ENABLE ROW LEVEL SECURITY;
      
      CREATE POLICY IF NOT EXISTS "Allow users to access their own commitments" 
      ON commitments FOR ALL USING (auth.uid() = user_id);
    `;
    
    const { error: rlsError } = await supabase.rpc('exec_sql', { sql_query: rlsSQL });
    
    if (rlsError) {
      console.log('‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel configurar RLS automaticamente');
      console.log('üìã Execute manualmente no Supabase Dashboard:');
      console.log(rlsSQL);
    } else {
      console.log('üîí RLS configurado com sucesso!');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error);
    console.log('\nüìã Execute manualmente no Supabase Dashboard:');
    console.log(`
-- Create commitments table
CREATE TABLE IF NOT EXISTS commitments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  date DATE NOT NULL,
  time TIME NOT NULL,
  status VARCHAR(50) DEFAULT 'pendente' CHECK (status IN ('pendente', 'confirmado', 'cancelado')),
  type VARCHAR(50) DEFAULT 'other' CHECK (type IN ('income', 'expense', 'investment', 'meeting', 'other')),
  amount NUMERIC(10, 2),
  category VARCHAR(255),
  recurring BOOLEAN DEFAULT FALSE,
  recurring_pattern VARCHAR(50) CHECK (recurring_pattern IN ('daily', 'weekly', 'monthly', 'yearly')),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE commitments ENABLE ROW LEVEL SECURITY;

-- Create RLS policy
CREATE POLICY "Allow users to access their own commitments" ON commitments FOR ALL USING (auth.uid() = user_id);
    `);
  }
}

runMigrationDirect();